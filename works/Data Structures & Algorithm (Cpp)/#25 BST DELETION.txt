#include<iostream>
using namespace std;
struct node{
int data;node * left;node *right;
};
class binary{public:node * head;
binary(){head=NULL;}
void insert(node * ptr){cout<<"\nEnter Data:";int key;cin>>key;
node * prev=ptr;
while(ptr!=NULL){prev=ptr;
if(ptr->data==key){cout<<"\nElement already present!!!"<<endl;return;}
else if(key>ptr->data){ptr=ptr->right;}else{ptr=ptr->left;}
}
node * p=new node;p->data=key;p->left=NULL;p->right=NULL;
if(prev==NULL){head=p;}else{
if(key>prev->data){prev->right=p;}else{prev->left=p;}}
}
node * getpre(node * ptr){ptr=ptr->left;
while(ptr->right!=NULL){ptr=ptr->right;}return ptr;}
node * dele(node * ptr,int ele){node * pred;
if(ptr==NULL){return NULL;}
if(ptr->left==NULL && ptr->right==NULL){free(ptr);return NULL;}
if(ele<ptr->data){ptr->left=dele(ptr->left,ele);}
else if(ele>ptr->data){ptr->right=dele(ptr->right,ele);}
else{pred=getpre(ptr);
    ptr->data=pred->data;
    ptr->left=dele(ptr->left,pred->data);}return ptr;
}
void traversal(node * ptr){
if(ptr!=NULL){traversal(ptr->left);
cout<<"\t"<<ptr->data;traversal(ptr->right);
}
return;}
};
int main(){binary tree;
x:cout<<"\nEnter:delete node(0) | new node(1) | exit(2) :";int inr;cin>>inr;
if(inr==1){tree.insert(tree.head);tree.traversal(tree.head);goto x;}else if(inr==0){cout<<"\nEnter Element:";int ele;cin>>ele;tree.dele(tree.head,ele);tree.traversal(tree.head);goto x;}
}